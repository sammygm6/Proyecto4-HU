/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package proyecto3_estructuras;

import com.lowagie.text.Document;
import com.lowagie.text.Image;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author Daniela Odileth
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        setLocationRelativeTo(null);
        
        Nodo n_1 = new Nodo("Gualalandia");
        Nodo n_2 = new Nodo("Venus");
        Nodo n_3 = new Nodo("Jupiter");
        Nodo n_4 = new Nodo("Tierra");
        Arista a_1 = new Arista(20, n_1, n_2);
        Arista a_2 = new Arista(100, n_1, n_3);
        Arista a_3 = new Arista(2, n_2, n_4);
        Arista a_4 = new Arista(50, n_1, n_4);
        Arista a_5 = new Arista(35, n_2, n_3);
        Arista a_6 = new Arista(34, n_3, n_4);
        n_1.aristas_nodo.add(a_1);
        n_1.aristas_nodo.add(a_2);
        n_1.aristas_nodo.add(a_4);
        n_2.aristas_nodo.add(a_1);
        n_2.aristas_nodo.add(a_3);
        n_2.aristas_nodo.add(a_5);
        n_3.aristas_nodo.add(a_2);
        n_3.aristas_nodo.add(a_5);
        n_3.aristas_nodo.add(a_6);
        n_4.aristas_nodo.add(a_3);
        n_4.aristas_nodo.add(a_4);
        n_4.aristas_nodo.add(a_6);
        grafo.lista_arista.add(a_1);
        grafo.lista_arista.add(a_2);
        grafo.lista_arista.add(a_3);
        grafo.lista_arista.add(a_4);
        grafo.lista_arista.add(a_5);
        grafo.lista_arista.add(a_6);
        grafo.lista_nodo.add(n_1);
        grafo.lista_nodo.add(n_2);
        grafo.lista_nodo.add(n_3);
        grafo.lista_nodo.add(n_4);
        
        modelo_cb = (DefaultComboBoxModel) planeta_direccion.getModel();
        modelo_md = (DefaultComboBoxModel) modificar_p.getModel();  
        
        for(int i = 0; i < grafo.getLista_nodo().size(); i++){
            modelo_cb.addElement(grafo.getNodo(i).getNombre());
            planeta_direccion.setModel(modelo_cb);
            
            modelo_md.addElement(grafo.getNodo(i).getNombre());
            modificar_p.setModel(modelo_md);
            
            
        }
//        for(int i = 0; i < grafo.getLista_arista().size(); i++){
//            System.out.println("Posicion " + i + "Tamaño de la arista " + grafo.getArista(i).getValue()
//                                + "Hijo de un lado " + grafo.getArista(i).getNodo_der().getNombre() +
//                                "Hijo del otro lado " + grafo.getArista(i).getNodo_izq().getNombre());
//        }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WARP = new javax.swing.ButtonGroup();
        Agregar = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        planeta_agregado = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        planeta_direccion = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        valor = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        Modificar = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        modificar_p = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        m_nombre = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        m_aristas = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        b_nombre = new javax.swing.JRadioButton();
        b_arista = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        m_tamaño = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        m_derecha = new javax.swing.JTextField();
        m_izquierda = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        b_tamaño = new javax.swing.JRadioButton();
        b_nd = new javax.swing.JRadioButton();
        b_ni = new javax.swing.JRadioButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        Eliminar = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        t_eliminar = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        b2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        Hola = new javax.swing.JFrame();
        m = new javax.swing.JDialog();
        pdf1 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reporte1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        origen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        destino = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        si = new javax.swing.JRadioButton();
        no = new javax.swing.JRadioButton();
        mapa = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Nombre del Planeta");

        jButton3.setText("Agregar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Direccion de la Arista");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Costo de la Arista");

        valor.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));

        jLabel22.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel22.setText("CHALLENGER II");

        jLabel21.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(planeta_direccion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(planeta_agregado, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGap(28, 28, 28)
                .addComponent(jLabel22)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(planeta_agregado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(planeta_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout AgregarLayout = new javax.swing.GroupLayout(Agregar.getContentPane());
        Agregar.getContentPane().setLayout(AgregarLayout);
        AgregarLayout.setHorizontalGroup(
            AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        AgregarLayout.setVerticalGroup(
            AgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Planetas");

        jButton4.setText("Modificar");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        modificar_p.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modificar_pItemStateChanged(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Nombre");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Aristas");

        m_aristas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                m_aristasItemStateChanged(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("¿Qué desea modificar?");

        b2.add(b_nombre);
        b_nombre.setText("Nombre");
        b_nombre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_nombreItemStateChanged(evt);
            }
        });

        b2.add(b_arista);
        b_arista.setText("Aristas");
        b_arista.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_aristaItemStateChanged(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Tamaño");

        m_tamaño.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("Nodo Derecha");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("Nodo Izquierda");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("¿Qué desea modificar?");

        buttonGroup1.add(b_tamaño);
        b_tamaño.setText("Tamaño");
        b_tamaño.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_tamañoItemStateChanged(evt);
            }
        });

        buttonGroup1.add(b_nd);
        b_nd.setText("Nodo Derecha");
        b_nd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_ndItemStateChanged(evt);
            }
        });

        buttonGroup1.add(b_ni);
        b_ni.setText("Nodo Izquierda");
        b_ni.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_niItemStateChanged(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel26.setText("CHALLENGER II");

        jLabel25.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(b_nombre)
                                .addGap(10, 10, 10)
                                .addComponent(b_arista))
                            .addComponent(jLabel11)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(modificar_p, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addGap(18, 18, 18)
                                    .addComponent(m_aristas, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(m_tamaño, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel17)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m_izquierda))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(m_derecha, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_tamaño)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_nd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(b_ni))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel26))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(m_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jButton4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(modificar_p, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(b_nombre)
                    .addComponent(b_arista))
                .addGap(7, 7, 7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(m_aristas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(b_tamaño)
                    .addComponent(b_nd)
                    .addComponent(b_ni))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(m_tamaño, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(m_derecha, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_izquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout ModificarLayout = new javax.swing.GroupLayout(Modificar.getContentPane());
        Modificar.getContentPane().setLayout(ModificarLayout);
        ModificarLayout.setHorizontalGroup(
            ModificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ModificarLayout.setVerticalGroup(
            ModificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Nombre del Planeta");

        jButton5.setText("Eliminar");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel29.setText("CHALLENGER II");

        jLabel30.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jButton5))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(t_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout EliminarLayout = new javax.swing.GroupLayout(Eliminar.getContentPane());
        Eliminar.getContentPane().setLayout(EliminarLayout);
        EliminarLayout.setHorizontalGroup(
            EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        EliminarLayout.setVerticalGroup(
            EliminarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel23.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        jLabel24.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel24.setText("CHALLENGER II");

        jLabel27.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        jLabel28.setFont(new java.awt.Font("OCR A Std", 1, 24)); // NOI18N
        jLabel28.setText("CHALLENGER II");

        javax.swing.GroupLayout HolaLayout = new javax.swing.GroupLayout(Hola.getContentPane());
        Hola.getContentPane().setLayout(HolaLayout);
        HolaLayout.setHorizontalGroup(
            HolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );
        HolaLayout.setVerticalGroup(
            HolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );

        pdf1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel35.setText("EL CAMINO MAS CORTO ES:");

        jLabel36.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        jLabel37.setFont(new java.awt.Font("OCR A Std", 1, 36)); // NOI18N
        jLabel37.setText("CHALLENGER II");

        jLabel38.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        jLabel38.setText("NACAOME AERONAUTICS AND SPACE ADMINISTRATION");

        reporte1.setColumns(20);
        reporte1.setRows(5);
        reporte1.setText("\n");
        jScrollPane2.setViewportView(reporte1);

        javax.swing.GroupLayout pdf1Layout = new javax.swing.GroupLayout(pdf1);
        pdf1.setLayout(pdf1Layout);
        pdf1Layout.setHorizontalGroup(
            pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pdf1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(pdf1Layout.createSequentialGroup()
                        .addGroup(pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pdf1Layout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pdf1Layout.setVerticalGroup(
            pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pdf1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pdf1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pdf1Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel36))
                .addGap(18, 18, 18)
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mLayout = new javax.swing.GroupLayout(m.getContentPane());
        m.getContentPane().setLayout(mLayout);
        mLayout.setHorizontalGroup(
            mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pdf1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mLayout.setVerticalGroup(
            mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pdf1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("OCR A Std", 1, 36)); // NOI18N
        jLabel1.setText("CHALLENGER II");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Planeta de Origen");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Planeta de Destino");

        jButton1.setText("Ver Camino");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Exportar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("¿Desea viajar con WARP?");

        WARP.add(si);
        si.setText("Si");

        WARP.add(no);
        no.setText("No");

        mapa.setBackground(new java.awt.Color(0, 0, 0));
        mapa.setForeground(new java.awt.Color(255, 255, 255));
        mapa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\large.jpg")); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));
        jLabel2.setMaximumSize(new java.awt.Dimension(300, 410));
        jLabel2.setMinimumSize(new java.awt.Dimension(300, 410));

        javax.swing.GroupLayout mapaLayout = new javax.swing.GroupLayout(mapa);
        mapa.setLayout(mapaLayout);
        mapaLayout.setHorizontalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mapaLayout.setVerticalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, Short.MAX_VALUE)
        );

        jButton6.setText("Ver Mapa");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon("C:\\Users\\Daniela Odileth\\Pictures\\mn.png")); // NOI18N

        jLabel19.setFont(new java.awt.Font("OCR A Extended", 1, 14)); // NOI18N
        jLabel19.setText("NACAOME AERONAUTICS AND SPACE ADMINISTRATION");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(si)
                        .addGap(10, 10, 10)
                        .addComponent(no)
                        .addGap(50, 50, 50)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(destino)
                            .addComponent(origen)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(116, 116, 116))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(si)
                    .addComponent(no)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jLabel20.getAccessibleContext().setAccessibleName("");

        jMenu1.setText("Opciones");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Agregar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Modificar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Eliminar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        m_nombre.setEnabled(false);
        m_tamaño.setEnabled(false);
        m_aristas.setEnabled(false);
        m_derecha.setEnabled(false);
        m_izquierda.setEnabled(false);
        b_tamaño.setEnabled(false);
        b_nd.setEnabled(false);
        b_ni.setEnabled(false);
        
       Modificar.setModal(true);
       Modificar.pack();
       Modificar.setLocationRelativeTo(null);
       Modificar.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       Eliminar.setModal(true);
       Eliminar.pack();
       Eliminar.setLocationRelativeTo(null);
       Eliminar.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
       String eliminar = t_eliminar.getText();
       
       for(int i = 0; i < grafo.getLista_arista().size(); i++){
           if(grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(eliminar) ||
               grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(eliminar)){
               grafo.getLista_arista().remove(i);
           }
       }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        Nodo inicio = null, fin;
        ArrayList<Nodo> imprimir;
        int warp;
        if (si.isSelected()) {
            planeta_origen = origen.getText();
            planeta_destino = destino.getText();
            warp = 1;
            for (int i = 0; i < grafo.lista_nodo.size(); i++) {
                if (planeta_origen.equalsIgnoreCase(grafo.lista_nodo.get(i).getNombre())) {
                    inicio = grafo.lista_nodo.get(i);
                } else if (planeta_destino.equalsIgnoreCase(grafo.lista_nodo.get(i).getNombre())) {
                    fin = grafo.lista_nodo.get(i);
                    //                   System.out.println("Entra");
                    imprimir = camino(inicio, fin, grafo, warp);
                    
                    System.out.println("entra a la variable imprimir");
                    System.out.println(imprimir.size());
                    System.out.println("EL CAMINO MAS OPTIMO PARA QUE PUEDA LLEGAR A " + planeta_destino + " ES: ");
                    reporte1.append("Viaje con WARP \n");
                    reporte1.append("El camino mas optimo de " + planeta_origen + " a " + planeta_destino + " es: \n");
                    for (int j = 0; j < imprimir.size(); j++) {
                        System.out.println(imprimir.get(j).getNombre());
                        if( j < imprimir.size()-1){
                            reporte1.append(imprimir.get(j).getNombre() + ", ");
                        }else{
                            reporte1.append(imprimir.get(j).getNombre());
                            reporte1.append("/n");
                           
                        }
                    }
//                         int m = camino(inicio, fin, grafo, warp);
//                    System.out.println("TAMAÑO QUE RETORNA" + m);

                } else {
                    //                   JOptionPane.showMessageDialog(this, "El nombre de los planetas no es correcto", "ERROR" ,JOptionPane.ERROR_MESSAGE);
                }
            }
            }else{
            planeta_origen = origen.getText();
            planeta_destino = destino.getText();
            warp = 3;

            for(int i = 0; i < grafo.lista_nodo.size(); i++){
                if (planeta_origen.equalsIgnoreCase(grafo.lista_nodo.get(i).getNombre())) {
                    inicio = grafo.lista_nodo.get(i);
                } else if (planeta_destino.equalsIgnoreCase(grafo.lista_nodo.get(i).getNombre())) {
                    fin = grafo.lista_nodo.get(i);
                    //                   System.out.println("Entra");
                    imprimir = camino(inicio, fin, grafo, warp);
                    System.out.println("entra a la variable imprimir");
                    System.out.println(imprimir.size());
                    System.out.println("EL CAMINO MAS OPTIMO PARA QUE PUEDA LLEGAR A " + planeta_destino + " ES: ");
                    reporte1.append("Viaje sin WARP \n");
                    reporte1.append("El camino mas optimo de " + planeta_origen + " a " + planeta_destino + " es: \n");
                    for (int j = 0; j < imprimir.size(); j++) {
                        System.out.println(imprimir.get(j).getNombre());
                        if( j < imprimir.size()-1){
                            reporte1.append(imprimir.get(j).getNombre() + ", ");
                        }else{
                            reporte1.append(imprimir.get(j).getNombre());
                            reporte1.append("\n");
                           
                        }
                    }
//                    int m = camino(inicio, fin, grafo, warp);
//                    System.out.println("TAMAÑO QUE RETORNA" + m);
                }else{
                    //                   JOptionPane.showMessageDialog(this, "El nombre de los planetas no es correcto", "ERROR" ,JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
       m.setModal(true);
       m.pack();
       m.setLocationRelativeTo(null);
       m.setVisible(true); 
        
        try {
            Document documentoPDF = new Document();
            JFileChooser fcs = new JFileChooser();
            int o = fcs.showSaveDialog(this);
            PdfWriter pdf = PdfWriter.getInstance(documentoPDF,
                    new FileOutputStream(fcs.getSelectedFile().getPath()));
            
            documentoPDF.open();
            documentoPDF.addAuthor("Daniela Osorto");
            documentoPDF.addCreator("Odileth");
            documentoPDF.addSubject("Documento en PDF");
            documentoPDF.addCreationDate();
            documentoPDF.addTitle("Reporte de Viajes");

            documentoPDF.add(new Paragraph("Reporte de Viajes"));
            documentoPDF.add(new Paragraph(new Date().toString()));
            documentoPDF.add(new Paragraph("\n"));

            BufferedImage bi = new BufferedImage(pdf1.getWidth(),
                    pdf1.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = bi.createGraphics();
            pdf1.paint(g);
            File t = new File("./temp.png");
            ImageIO.write(bi, "png", t);
            documentoPDF.add(
                    Image.getInstance("./temp.png")
            );
            t.delete();
            documentoPDF.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       Agregar.setModal(true);
       Agregar.pack();
       Agregar.setLocationRelativeTo(null);
       Agregar.setVisible(true);
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        int peso = Integer.parseInt(valor.getValue().toString());
        String nombre = (String) planeta_direccion.getSelectedItem();
        Nodo direccion;
        for (int i = 0; i < grafo.getLista_nodo().size(); i++) {
            if (planeta_agregado.getText().equalsIgnoreCase(grafo.getNodo(i).getNombre())) {
                if (nombre.equalsIgnoreCase(grafo.getNodo(i).getNombre())) {
                    direccion = grafo.getNodo(i);
                    Arista nueva = new Arista(peso, grafo.getNodo(i), direccion);
                    grafo.getNodo(i).getAristas_nodo().add(nueva);
                }
            } else {
                if (nombre.equalsIgnoreCase(grafo.getNodo(i).getNombre())) {
                    direccion = grafo.getNodo(i);

                    Nodo nuevo = new Nodo(planeta_agregado.getText());
                    Arista nueva = new Arista(peso, nuevo, direccion);

                    grafo.getNodo(i).getAristas_nodo().add(nueva);
                    grafo.getLista_arista().add(nueva);
                    grafo.getLista_nodo().add(nuevo);
                }
            }

        }

        modelo_cb = (DefaultComboBoxModel) planeta_direccion.getModel();
        modelo_cb.addElement(planeta_agregado.getText());
        planeta_direccion.setModel(modelo_cb);

        modelo_md = (DefaultComboBoxModel) modificar_p.getModel();
        modificar_p.setModel(modelo_md);

        planeta_direccion.setModel(modelo_cb);
        planeta_agregado.setText("");
//        int v_n = 1;
//        String n = v_n+"";
//        valor.setValue(n);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        for(int i = 0; i < grafo.getLista_nodo().size(); i++){
            if(validar_n.equalsIgnoreCase(grafo.getNodo(i).getNombre())){
                if(m_nombre.isEnabled()){
                    grafo.getNodo(i).setNombre(m_nombre.getText());
                } else {
                    for (int j = 0; j < grafo.getNodo(i).getAristas_nodo().size(); j++) {
                        if (validar_a == grafo.getNodo(i).getAristadelNodo(j).getValue()) {
                            if (m_tamaño.isEnabled()) {
                                grafo.getNodo(i).getAristadelNodo(j).setValue(Integer.parseInt(m_tamaño.getValue().toString()));
                            }else if(m_derecha.isEnabled()){
                                if(grafo.getNodo(i).getAristadelNodo(j).getNodo_der().getNombre().equalsIgnoreCase(m_derecha.getText())){
                                    Nodo nuevo = grafo.getNodo(i).getAristadelNodo(j).getNodo_der();
                                    grafo.getNodo(i).getAristadelNodo(j).setNodo_der(nuevo);
                                }
                            }else if(m_izquierda.isEnabled()){
                                 if(grafo.getNodo(i).getAristadelNodo(j).getNodo_izq().getNombre().equalsIgnoreCase(m_izquierda.getText())){
                                    Nodo nuevo = grafo.getNodo(i).getAristadelNodo(j).getNodo_izq();
                                    grafo.getNodo(i).getAristadelNodo(j).setNodo_izq(nuevo);
                                }
                            }
                        }
                    }
                }
            }
        }
        
        m_nombre.setText("");
        m_derecha.setText("");
        m_izquierda.setText("");
        m_nombre.setEnabled(false);
        m_tamaño.setEnabled(false);
        m_aristas.setEnabled(false);
        m_derecha.setEnabled(false);
        m_izquierda.setEnabled(false);
        b_tamaño.setEnabled(false);
        b_nd.setEnabled(false);
        b_ni.setEnabled(false);
    }//GEN-LAST:event_jButton4MouseClicked

    private void modificar_pItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modificar_pItemStateChanged
         String tem = (String) modificar_p.getSelectedItem();
         validar_n = tem;
         
        if (evt.getStateChange() == 1) {
            m_aristas.removeAllItems();
              for (Nodo temp2 : grafo.getLista_nodo()) {
                  if(tem.equalsIgnoreCase(temp2.getNombre())){
                      m_nombre.setText(temp2.getNombre());
                      
                      m_arista = (DefaultComboBoxModel) m_aristas.getModel();
                      for(int i = 0; i < temp2.getAristas_nodo().size();i++){
                        if(temp2.getNombre().equalsIgnoreCase(tem)){  
                            m_arista.addElement(temp2.getAristas_nodo().get(i).getValue());
                            m_aristas.setModel(m_arista);
                        }else{
                            m_aristas.remove(i);
                            m_aristas.setModel(m_arista);
                        }
                      }
                  }
              }
//            DefaultTableModel modelotabla = (DefaultTableModel) tabla_producto.getModel();
//            for (Producto temp2 : lista_producto) {
//                if (temp.getNombre().equals(temp2.getNombre_comercio())) {
//
//                    Object[] row = {temp2.getNombre_producto(), temp2.getPrecio()};
//                    modelotabla.addRow(row);
//                    tabla_producto.setModel(modelotabla);
//
//                }
//            }
        }
    }//GEN-LAST:event_modificar_pItemStateChanged

    private void b_nombreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_nombreItemStateChanged
        if(b_nombre.isSelected()){
            m_nombre.setEnabled(true);
            m_aristas.setEnabled(false);
        }
    }//GEN-LAST:event_b_nombreItemStateChanged

    private void b_aristaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_aristaItemStateChanged
//        if(b_arista.isSelected()){
            m_aristas.setEnabled(true);
            m_nombre.setEnabled(false);
            b_tamaño.setEnabled(true);
            b_ni.setEnabled(true);
            b_nd.setEnabled(true);
//        }
    }//GEN-LAST:event_b_aristaItemStateChanged

    private void b_tamañoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_tamañoItemStateChanged
          m_tamaño.setEnabled(true);
          m_derecha.setEnabled(false);
          m_izquierda.setEnabled(false);
    }//GEN-LAST:event_b_tamañoItemStateChanged

    private void m_aristasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_m_aristasItemStateChanged
//         int tem = (int) m_arista.getSelectedItem();
//         validar_a = tem;
//         
//        if (evt.getStateChange() == 1) {
//              for (Arista temp2 : grafo.getLista_arista()) {
//                  if(tem == temp2.getValue()){
//                      m_tamaño.setValue(temp2.getValue());
//                      m_derecha.setText(temp2.getNodo_der().getNombre());
//                      m_izquierda.setText(temp2.getNodo_izq().getNombre()); 
//                  }
//              }
//        }
    }//GEN-LAST:event_m_aristasItemStateChanged

    private void b_ndItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_ndItemStateChanged
        m_tamaño.setEnabled(false);
        m_derecha.setEnabled(true);
        m_izquierda.setEnabled(false);
    }//GEN-LAST:event_b_ndItemStateChanged

    private void b_niItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_niItemStateChanged
        m_tamaño.setEnabled(false);
        m_derecha.setEnabled(false);
        m_izquierda.setEnabled(true);
    }//GEN-LAST:event_b_niItemStateChanged

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        Graphics g = mapa.getGraphics();
        Random x = new Random();
        Random y = new Random();
        int v_x, v_y;
        int temp_x = 0, temp_y = 0;
        int vuelta = 1;
                
        Graphics2D g2 = (Graphics2D) mapa.getGraphics();
        Graphics2D g3 = (Graphics2D) mapa.getGraphics();
        g2.setStroke(new BasicStroke(3.0f));
        g.setColor( Color.RED);
         g2.setPaint(new GradientPaint(5, 30, Color.MAGENTA, 35, 100,Color.YELLOW, true));
         g3.setPaint(new GradientPaint(5, 30, Color.BLUE, 35, 100,Color.YELLOW, true));
         int cantidad = 50;
         int cantidad_n = 100;
//          g2.setColor(Color.GREEN);
         if(c == 0){
             for (int i = 0; i < grafo.getLista_nodo().size(); i++) {
             
//            if(c < 0){
                if (vuelta == 1) {
                    v_x = 1 + x.nextInt(410);
                    v_y = 1 + y.nextInt(300);
                    System.out.println("EN X " + mapa.getX() + " EN Y " + mapa.getY());
                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 15, v_x);
                    c++;
                    
                   temp_x = v_x;
                   temp_y = v_y;
//                   g3.draw(new Line2D.Double(300, 200 , 100, 300));
//                 for (int j = 0; j < grafo.getLista_arista().size(); j++) {
//                    if(grafo.getArista(j).getNodo_der().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre()) ||
//                       grafo.getArista(j).getNodo_izq().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre())){
//                        
//                           g2.draw(new Line2D.Double(v_y, v_x , v_x, v_y));
//                    }
//                       
//                 }
//                 c++;
                   vuelta = 2;
                } else {
                    v_x = 10 + x.nextInt(mapa.getX());
                    v_y = 80 + y.nextInt(mapa.getY());
                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 10, v_x + 80);
                    cantidad = cantidad + 50;
                    cantidad_n = cantidad_n + 100;
                    c++;
                    g3.draw(new Line2D.Double(temp_y, temp_x , v_y, v_x));
                    
//                    for (int j = 0; j < grafo.getLista_arista().size(); j++) {
//                         if(/*grafo.getArista(j).getNodo_der().getNombre().equalsIgnoreCase(grafo.getNodo(i-1).getNombre()) ||
//                            grafo.getArista(j).getNodo_izq().getNombre().equalsIgnoreCase(grafo.getNodo(i-1).getNombre()) &&*/
//                            (grafo.getArista(j).getNodo_der().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre()) ||
//                            grafo.getArista(j).getNodo_izq().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre())) ){
//
//                                g3.draw(new Line2D.Double(v_y, v_x , temp_x, temp_y));
//                         }
//                     }
                }
//                c++;
//            }else{
//                i = cantidad;
//                  if (vuelta == 1) {
//                    v_x = 1 + x.nextInt(450);
//                    v_y = 1 + y.nextInt(350);
//                    System.out.println("EN X " + mapa.getX() + " EN Y " + mapa.getY());
//                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
//                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
//                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 15, v_x);
//                   
//                 for (int j = 0; j < grafo.getLista_arista().size(); j++) {
//                    if(grafo.getArista(j).getNodo_der().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre()) ||
//                       grafo.getArista(j).getNodo_izq().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre())){
//                        
//                           g2.draw(new Line2D.Double(v_y, v_x , v_x, v_y));
//                    }
//                       
//                 }
//                 c++;
//                } else {
//                    v_x = 10 + x.nextInt(mapa.getX());
//                    v_y = 80 + y.nextInt(mapa.getY());
//                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
//                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
//                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 10, v_x + 80);
//                    cantidad = cantidad + 50;
//                    cantidad_n = cantidad_n + 100;
//                }
//                c++;
//            }

//           g2.fill(new Ellipse2D.Double(40 ,80, 30, 30));
//           g3.fill(new Ellipse2D.Double(50,10 , 30, 30));
//           g3.fill(new Ellipse2D.Double(400, 400, 30, 30));
//           g3.fill(new Ellipse2D.Double(450, 350, 30, 30));
//                c=1;
             }
            }else{
              for (int i = c; i < grafo.getLista_nodo().size(); i++) {
//            if(c < 0){
                if (vuelta == 1) {
                    v_x = 1 + x.nextInt(400);
                    v_y = 1 + y.nextInt(300);
                    System.out.println("EN X " + mapa.getX() + " EN Y " + mapa.getY());
                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 15, v_x);
                   
//                 for (int j = 0; j < grafo.getLista_arista().size(); j++) {
//                    if(grafo.getArista(j).getNodo_der().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre()) ||
//                       grafo.getArista(j).getNodo_izq().getNombre().equalsIgnoreCase(grafo.getNodo(i).getNombre())){
//                        
//                           g2.draw(new Line2D.Double(v_y, v_x , v_x, v_y));
//                    }
//                       
//                 }
                 c++;
                } else {
                    v_x = 10 + x.nextInt(mapa.getX());
                    v_y = 80 + y.nextInt(mapa.getY());
                    g2.fill(new Ellipse2D.Double(v_y, v_x, 30, 30));
                    g.setFont(new Font("SansSerif", Font.PLAIN, 14));
                    g.drawString(grafo.getNodo(i).getNombre(), v_y - 10, v_x + 80);
                    cantidad = cantidad + 50;
                    cantidad_n = cantidad_n + 100;
                }
                c++;
              }
         }

             
//              g2.draw(new Line2D.Double(252, 70 , 100, 70));
         
//            g2.setColor(Color.GREEN);
//             g2.draw(new Line2D.Double(252, 70 , 100, 70));
//              g2.draw(new Line2D.Double(70, 252, 70, 120));
//              //PROBANDO LA LINEA
//              g2.draw(new Line2D.Double(252, 300 , 120, 300));
//              g2.draw(new Line2D.Double(300, 252 , 300, 120));
//              //Cruzadas
//              g2.draw(new Line2D.Double(270, 107, 107, 270));
//              g2.draw(new Line2D.Double(270, 270, 85, 85));
              
//        g.fillOval(100, 50, 90, 90);
       
    }//GEN-LAST:event_jButton6MouseClicked

    ArrayList<Nodo> camino(Nodo nodo_principal, Nodo nodo_final, Grafo grafo, int warp) {
        System.out.println("entra al metodo del camino");
        boolean fin = false;
        int temp_warp;
        int peso = 0;
        int cantidad = 0;
        int n = 0;
        int m = 0;
        int total_recorrido = 0;

        Nodo nodo_inicial = nodo_principal;
//        System.out.println("Nodo del nombre inicial "+ nodo_inicial.getNombre());
//        System.out.println("Entra al while");
        do{
            for (int i = 0; i < grafo.getLista_arista().size(); i++) {
                System.out.println("POSICION DEL FOR " + i);
//                System.out.println("Entra al for del camino");
//                  System.out.println("Antes de entrar al segundo if"
//                            + "Nodo de la derecha " + grafo.getArista(i).getNodo_der().getNombre() + 
//                          "Nodo de la izquierda " + grafo.getArista(i).getNodo_izq().getNombre());
//                  System.out.println("-----EL BOOLEAN DE LOS GRAFOS");
//                  System.out.println(grafo.getArista(i).isVisitado());
//                  System.out.println("---------------------------------------------");
//                  System.out.println(nodo_inicial.getNombre());
                if (((grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(nodo_inicial.getNombre())
                        && grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(planeta_destino))
                        || (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_inicial.getNombre())
                        && grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(planeta_destino)))
                        && (!grafo.getArista(i).isVisitado())) {
                    System.out.println("PRIMER IF DEL CAMINO");
//                    warp++; 
                       if (warp < 3) {
                          peso = grafo.getArista(i).getValue();
                          cantidad++;
                          warp++;
                          temp_warp = peso + cantidad;
                            if(temp_warp < total_warp){
                                total_warp = temp_warp;
                                total_recorrido = total_warp;
                            }
//                        peso = 0;
//                       warp++;
                        } else {
                            peso = peso + grafo.getArista(i).getValue();
                            System.out.println("peso " + peso);
                            cantidad++;
                            total_recorrido = peso + cantidad;
                        }
                    
//                    System.out.println("Total recorrido" + total_recorrido);

                    if (n == 0 || total_recorrido < temporal) {
                        temporal = total_recorrido;
                        lista_cerrada.add(nodo_inicial);
                        lista_cerrada.add(nodo_final);
                        System.out.println("Total recorrido" + temporal);
                        total_recorrido = 0;
                        peso = 0;
                        cantidad = 0;
                        n = 1;
                        System.out.println("EN EL PRIMER IF LA LISTA CERRADA ORIGINAL");
                        for(int k = 0; k < lista_cerrada.size(); k++){
                            System.out.println(lista_cerrada.get(k).getNombre());
                        }

                        //Encontrar la manera de que la lista cerrada pase a una temp
                        if (d == 0) {
                            System.out.println("JAJAJAJAJAJA");
                            lista_final = lista_cerrada;
                            for(int k = 0; k < lista_final.size(); k++){
                            System.out.println(lista_final.get(k).getNombre());
                            }
                            
                            //AL ELIMINAR NO FUNCIONA BIEN 
                            for (int k = 0; k < lista_cerrada.size(); k++) {
                                lista_cerrada.remove(k);
                            }
                            System.out.println("TAMAÑO LISTA CERRA LA PRIMERA VEZ");
                            System.out.println(lista_cerrada.size());
                            
//                            for (int k = 0; k < lista_cerrada.size(); k++) {
//                            System.out.println("LA LISTA FINAL CERRADA");
//                                System.out.println(lista_final.get(k).getNombre());
//                                }
                            d = 1;
                        } else {
                            //NO FUNCIONA ELIMINAR
                            for (int k = 0; k < lista_final.size(); k++) {
                                lista_final.remove(k);
                                System.out.println("CUANDO D != 0 Y ELIMINA LO DE LA LISTA FINAL EL TAMAÑO ES " +lista_final.size());
                            }
                            
                            lista_final = lista_cerrada;
                            for(int k = 0; k < lista_final.size(); k++){
                            System.out.println(lista_final.get(k).getNombre());
                            }
                            System.out.println("Eliminando de la lista cerrada la segunda vez");
                            //NO FUNCIONA ELIMINAR
                            for (int k = 0; k < lista_cerrada.size(); k++) {
                                lista_cerrada.remove(k);
                            }
                            System.out.println(lista_cerrada.size());
                            
//                            for(int q = 0; q < lista_cerrada.size(); q++){
//                                lista_final.add(lista_cerrada.get(q));
//                                System.out.println("LA LISTA FINAL");
//                                System.out.println(lista_final.get(q).getNombre());
//                                lista_cerrada.remove(q);
//                            }
                        }
                    }
//                    cantidad = 0;
//                    lista_cerrada.add(nodo_inicial)
                    System.out.println("tamaño lista cerrada " + lista_final.size());
                    for (int k = 0; k < lista_final.size(); k++) {
                        System.out.println("Planetas por donde debe pasar " + lista_final.get(k).getNombre());
                    }

                    if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(planeta_origen)
                            || grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(planeta_origen)) {
                        grafo.getArista(i).setVisitado(true);
                        principales_aristas++;
//                        nodo_principal.getAristas_nodo().add(grafo.getArista(i));
                    }
                    nodo_inicial = nodo_principal;
                    i = 0;
                    m = 0;
//                    
//                    for(int k = 0; k < lista_cerrada.size(); k++){
//                        if(lista_cerrada.get(k).getNombre().equalsIgnoreCase(planeta_origen)){
//                        }else{
//                             lista_cerrada.remove(k);
//                        }
//                    }
                } else if ((grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_inicial.getNombre())
                        || grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(nodo_inicial.getNombre()))
                        && (!grafo.getArista(i).isVisitado())) { //validar que no sea un nodo de la lista cerrada
                  if (m == 0) {
                      if(warp < 3){
                          peso = grafo.getArista(i).getValue();
                          cantidad++;
                          warp++;
                          temp_warp = peso + cantidad;
                          total_warp = temp_warp;
                      }else{
                        peso = peso + grafo.getArista(i).getValue();
                        cantidad++;
                      }
                        System.out.println("SEGUNDO IF DEL CAMINO");
                        System.out.println("Antes del set");
                        System.out.println(grafo.getArista(i).isVisitado());
                        System.out.println(nodo_inicial.getNombre());
                        m = 1;
                        if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_principal.getNombre())
                                || grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(nodo_principal.getNombre())) {
                            grafo.getArista(i).setVisitado(true);
                            System.out.println("Despues del set");
                            System.out.println(grafo.getArista(i).isVisitado());
                            principales_aristas++;
                            //                        nodo_principal.getAristas_nodo().add(grafo.getArista(i));
                        }
                        if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_inicial.getNombre())) {
                            lista_cerrada.add(nodo_inicial);
                            nodo_inicial = grafo.getArista(i).getNodo_izq();
                        } else {
                            lista_cerrada.add(nodo_inicial);
                            nodo_inicial = grafo.getArista(i).getNodo_der();
                        }
                        System.out.println(lista_cerrada.size() + " LISTA CERRADA");
                        //VALIDA SI EL NODO ESTA EN LA LISTA CERRADA    
                    } else if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(planeta_origen)
                            || grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(planeta_origen)) {
                        System.out.println("Hola");

                    } else {
                        System.out.println("entra al segundo if cuando m != 0");
                        System.out.println("DERECHA " + grafo.getArista(i).getNodo_der().getNombre());
                        System.out.println("IZQUIERDA " + grafo.getArista(i).getNodo_izq().getNombre());
                        if(warp < 3){
                            peso = grafo.getArista(i).getValue();
                            cantidad++;
                            warp++;
                            temp_warp = peso + cantidad;
                            if(temp_warp < total_warp){
                                total_warp = temp_warp;
                            }
                        }else{
                        peso = peso + grafo.getArista(i).getValue();
                        cantidad++;
                        }
                        if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_principal.getNombre())
                                || grafo.getArista(i).getNodo_izq().getNombre().equalsIgnoreCase(nodo_principal.getNombre())) {
                            grafo.getArista(i).setVisitado(true);
                            System.out.println("Despues del set");
                            System.out.println(grafo.getArista(i).isVisitado());
                            principales_aristas++;
                            //                        nodo_principal.getAristas_nodo().add(grafo.getArista(i));
                        }
                        if (grafo.getArista(i).getNodo_der().getNombre().equalsIgnoreCase(nodo_inicial.getNombre())) {
                            lista_cerrada.add(nodo_inicial);
                            nodo_inicial = grafo.getArista(i).getNodo_izq();
                        } else {
                            lista_cerrada.add(nodo_inicial);
                            nodo_inicial = grafo.getArista(i).getNodo_der();
                        }
                        System.out.println(lista_cerrada.size() + " LISTA CERRADA");
                    }
                
//                    fin = true;
                } else /*if(principales_aristas == nodo_principal.getAristas_nodo().size())*/ {//VALIDAR QUE TODAS LAS ARISTAS ESTEN TRUE
                    System.out.println("ULTIMO IF DEL CAMINO");
                    int n_nodos = 0;
                    System.out.println("No ha entrado al for");
                    System.out.println(nodo_principal.getAristas_nodo().size());

                    for (int j = 0; j < nodo_principal.getAristas_nodo().size(); j++) {
                        System.out.println("Entro al for");
                        System.out.println("TAMAÑO DEL ARRAY DE LAS ARRISTAS DEL NODO PRINCIPAL " + nodo_principal.getAristas_nodo().size());
                        System.out.println(nodo_principal.getAristadelNodo(j).isVisitado());
                        if (nodo_principal.getAristadelNodo(j).isVisitado()) {
                            n_nodos++;
                            System.out.println("Entra al if");
                            System.out.println(nodo_principal.getAristadelNodo(j).isVisitado());
                            System.out.println(n_nodos);
                        }
                        if (n_nodos == /*nodo_principal.getAristas_nodo().size()*/ 3) {
                            System.out.println("entra al if que cambia el while");

                            peso = peso + cantidad;
                            System.out.println("YA CAMBIO EL BOOLEAN");
//                            fin = true;
//                            break;
                            p = 10;
                            i = grafo.getLista_arista().size();
                        }
                    }
                }
                if (!lista_cerrada.get(lista_cerrada.size() - 1).getNombre().equalsIgnoreCase(planeta_destino) && i == grafo.getLista_arista().size() - 1) {
                    i = 0;
                }
//            fin = true;
            //VALOR TOTAL DEL RECORRIDO
//            peso = peso + cantidad;
//            if (n == 0 || peso < temp) {
//                temp = peso;
//                n = 1;
//                peso = 0;
            }
            
//            if(p == 10){
//              fin = true;
//            }
        }while(p != 10);
        System.out.println(lista_final.size());
        return lista_final;
//        return temporal;
    }
    
    void DibujarMapa(JFrame hola, Grafo gafo){
            JPanel imagen;
            
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Agregar;
    private javax.swing.JDialog Eliminar;
    private javax.swing.JFrame Hola;
    private javax.swing.JDialog Modificar;
    private javax.swing.ButtonGroup WARP;
    private javax.swing.ButtonGroup b2;
    private javax.swing.JRadioButton b_arista;
    private javax.swing.JRadioButton b_nd;
    private javax.swing.JRadioButton b_ni;
    private javax.swing.JRadioButton b_nombre;
    private javax.swing.JRadioButton b_tamaño;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField destino;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog m;
    private javax.swing.JComboBox m_aristas;
    private javax.swing.JTextField m_derecha;
    private javax.swing.JTextField m_izquierda;
    private javax.swing.JTextField m_nombre;
    private javax.swing.JSpinner m_tamaño;
    private javax.swing.JPanel mapa;
    private javax.swing.JComboBox modificar_p;
    private javax.swing.JRadioButton no;
    private javax.swing.JTextField origen;
    private javax.swing.JPanel pdf1;
    private javax.swing.JTextField planeta_agregado;
    private javax.swing.JComboBox planeta_direccion;
    private javax.swing.JTextArea reporte1;
    private javax.swing.JRadioButton si;
    private javax.swing.JTextField t_eliminar;
    private javax.swing.JSpinner valor;
    // End of variables declaration//GEN-END:variables
    Grafo grafo = new Grafo();
    DefaultComboBoxModel modelo_cb;
    DefaultComboBoxModel modelo_md;
    DefaultComboBoxModel m_arista;
    ArrayList<Nodo> lista_cerrada = new ArrayList();
    ArrayList<Nodo> lista_final = new ArrayList();
    int total;
    int temp;
    int p = 0;
    String planeta_origen;
    int temporal;
    int principales_aristas = 0;
    String planeta_destino;
    String validar_n;
    int validar_a;
    int total_warp;
    int d = 0;  
    int c = 0;
}
